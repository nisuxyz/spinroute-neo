{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backend.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.backend.name }}
    component: backend
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.backend.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .Values.backend.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.backend.name }}
        component: backend
        release: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Values.backend.name }}
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Values.global.imageTag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy | default .Values.global.imagePullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.backend.port }}
          protocol: TCP
        {{- if .Values.volumes.enabled }}
        volumeMounts:
        - name: source-code
          mountPath: {{ .Values.volumes.mountPath }}
          subPath: backend
        {{- end }}
        env:
        {{- range .Values.backend.env }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        {{- if .Values.database.enabled }}
        - name: DATABASE_URL
          value: "postgresql://{{ .Values.database.auth.username }}:{{ .Values.database.auth.password }}@{{ .Values.database.name }}.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.database.port }}/{{ .Values.database.auth.database }}"
        {{- end }}
        # Add service discovery environment variables for microservices
        {{- range .Values.microservices }}
        {{- if .enabled }}
        - name: {{ upper .name }}_SERVICE_URL
          value: "http://{{ .name }}-service.{{ $.Values.global.namespace }}.svc.cluster.local"
        {{- end }}
        {{- end }}
        resources:
          {{- toYaml .Values.backend.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      {{- if .Values.volumes.enabled }}
      volumes:
      - name: source-code
        hostPath:
          path: {{ .Values.volumes.hostPath }}
          type: Directory
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.backend.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.backend.name }}
    component: backend
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.backend.service.type }}
  ports:
  - port: {{ .Values.backend.service.port }}
    targetPort: {{ .Values.backend.service.targetPort }}
    protocol: TCP
    name: http
  selector:
    app: {{ .Values.backend.name }}
    release: {{ .Release.Name }}
{{- end }}
